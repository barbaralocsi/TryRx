#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

using System.Reactive;
using System.Reactive.Linq;
using System.Reactive.Disposables;

// Empty, Return, Never and Throw

#!csharp

var empty = Observable.Empty<int>();

var subscriptionDisposable = empty.Subscribe(
    x=> Console.WriteLine($"OnNext called: {x}"),
    x=> Console.WriteLine($"OnError called: {x}"),
    () => Console.WriteLine($"OnCompleted called")
);

#!csharp

var customEmpty = Observable.Create<int>( observer => {
    observer.OnCompleted();
    return Disposable.Empty;
});

var subscriptionDisposable = customEmpty.Subscribe(
    x=> Console.WriteLine($"OnNext called: {x}"),
    x=> Console.WriteLine($"OnError called: {x}"),
    () => Console.WriteLine($"OnCompleted called")
);

#!csharp

var ret = Observable.Return<int>(5);

var subscriptionDisposable = ret.Subscribe(
    x=> Console.WriteLine($"OnNext called: {x}"),
    x=> Console.WriteLine($"OnError called: {x}"),
    () => Console.WriteLine($"OnCompleted called")
);

#!csharp

var customReturn = Observable.Create<int>(observer => {
    observer.OnNext(5);
    observer.OnCompleted();
    return Disposable.Empty;
});

var subscriptionDisposable = customReturn.Subscribe(
    x=> Console.WriteLine($"OnNext called: {x}"),
    x=> Console.WriteLine($"OnError called: {x}"),
    () => Console.WriteLine($"OnCompleted called")
);

#!csharp

var never = Observable.Never<int>();

var subscriptionDisposable = never.Subscribe(
    x=> Console.WriteLine($"OnNext called: {x}"),
    x=> Console.WriteLine($"OnError called: {x}"),
    () => Console.WriteLine($"OnCompleted called")
);

#!csharp

var customNever = Observable.Create<int>(observer => {
    return Disposable.Empty;
});

var subscriptionDisposable = customNever.Subscribe(
    x=> Console.WriteLine($"OnNext called: {x}"),
    x=> Console.WriteLine($"OnError called: {x}"),
    () => Console.WriteLine($"OnCompleted called")
);

#!csharp

var t = Observable.Throw<Exception>(new Exception("Very bad!"));

var subscriptionDisposable = t.Subscribe(
    x=> Console.WriteLine($"OnNext called: {x}"),
    x=> Console.WriteLine($"OnError called: {x}"),
    () => Console.WriteLine($"OnCompleted called")
);

#!csharp

var customT = Observable.Create<Exception>(observer =>{
    observer.OnError(new Exception("Very bad!"));
    return Disposable.Empty;
});

var subscriptionDisposable = customT.Subscribe(
    x=> Console.WriteLine($"OnNext called: {x}"),
    x=> Console.WriteLine($"OnError called: {x}"),
    () => Console.WriteLine($"OnCompleted called")
);
